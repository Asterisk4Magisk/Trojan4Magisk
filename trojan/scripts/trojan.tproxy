#!/system/bin/sh

dnsmasq_uid="1052"
route_id="1130"
inet_uid="3003"
net_raw_uid="3004"
route_name="TROJAN"
dns_port="65534"
proxy_port="65535"
mark_id="2020"
table_file="/data/misc/net/rt_tables"
appid_file="/data/trojan/appid.list"
softap_file="/data/trojan/softap.list"
iptables_wait="iptables"
proxy_mode="none"
appid_list=()
intranet=(0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16 172.16.0.0/12 192.168.0.0/16 224.0.0.0/4 240.0.0.0/4)

server_ip=$(grep -Po '\s*"remote_addr"\s*:\s*"\K[^"]+' /data/trojan/config.json)
table_file="/data/misc/net/rt_tables"
tun_ip="198.18.0.0/16"

suit_iptables_version() {
  iptables_version=`iptables -V | grep -o "v1\.[0-9]"`
  if [ "${iptables_version}" = "v1.4" ] ; then
    ## fix options for lower version iptables
    export ANDROID_DATA=/data
    export ANDROID_ROOT=/system
    iptables_wait="iptables -w"
  elif [ "${iptables_version}" = "v1.6" ] || [ "${iptables_version}" = "v1.8" ] ; then
    iptables_wait="iptables -w 100"
  else
    iptables_wait="echo iptables"
  fi
}

find_ip_path() {
  [ -f /system/bin/ip ] && alias ip="/system/bin/ip" && return 0
  [ -f /system/xbin/ip ] && alias ip="/system/xbin/ip" && return 0
  return 1
}

find_netstat_path() {
  [ -f /system/bin/netstat ] && alias netstat="/system/bin/netstat" && return 0
  [ -f /system/xbin/netstat ] && alias netstat="/system/xbin/netstat" && return 0
  return 1
}

create_mangle_iptables() {
  echo "[Info]: creating mangle chain"
    ${iptables_wait} -t mangle -N TROJAN

    for subnet in ${intranet[@]} ; do
        ${iptables_wait} -t mangle -A TROJAN -d ${subnet} -j RETURN
    done

    ${iptables_wait} -t mangle -A TROJAN -p tcp ! --dport 53 -j MARK --set-xmark ${mark_id}
    ${iptables_wait} -t mangle -A TROJAN -p udp ! --dport 53 -j MARK --set-xmark ${mark_id}

    create_dns_iptables
    create_proxy_iptables
    create_ap_iptables
}

create_ap_iptables() {
  echo "[Info]: creating nat ap chain"
    ${iptables_wait} -t nat -N AP_PROXY
    for subnet in ${intranet[@]} ; do
        ${iptables_wait} -t nat -A AP_PROXY -d ${subnet} -j RETURN
    done
    ${iptables_wait} -t nat -A AP_PROXY -i wlan0 -p tcp -j REDIRECT --to-port ${proxy_port}
    ${iptables_wait} -t nat -I PREROUTING -j AP_PROXY
    ${iptables_wait} -t nat -I PREROUTING -j DNS
}

create_proxy_iptables() {
  echo "[Info]: creating proxy"
    ${iptables_wait} -t mangle -N PROXY
    ${iptables_wait} -t nat -N FILTER_DNS

    ${iptables_wait} -t mangle -A PROXY -m owner --gid-owner ${net_raw_uid} -j RETURN
    ${iptables_wait} -t mangle -A PROXY -m owner --gid-owner ${inet_uid} -j RETURN
    ${iptables_wait} -t nat -A FILTER_DNS -m owner --gid-owner ${net_raw_uid}  -j RETURN
    ${iptables_wait} -t nat -A FILTER_DNS -m owner --gid-owner ${inet_uid} -j RETURN

    probe_proxy_mode

    if [ "${proxy_mode}" = "ALL" ] ; then
        ${iptables_wait} -t mangle -A PROXY -j TROJAN
        ${iptables_wait} -t nat -A FILTER_DNS -j DNS
    elif [ "${proxy_mode}" = "skip" ] ; then
        for appid in ${appid_list[@]} ; do
            ${iptables_wait} -t mangle -I PROXY -m owner --uid-owner ${appid} ! -d ${tun_ip} -j RETURN
            ${iptables_wait} -t nat -A FILTER_DNS -m owner --uid-owner ${appid} -j RETURN
        done
        ${iptables_wait} -t mangle -A PROXY -j TROJAN
        ${iptables_wait} -t nat -A FILTER_DNS -j DNS
    elif [ "${proxy_mode}" = "pick" ] ; then
        for appid in ${appid_list[@]} ; do
            ${iptables_wait} -t mangle -A PROXY -m owner --uid-owner ${appid} -j TROJAN
            ${iptables_wait} -t nat -A FILTER_DNS -m owner --uid-owner ${appid} -j DNS
        done
    fi

    ${iptables_wait} -t mangle -A OUTPUT -j PROXY
    ${iptables_wait} -t nat -A OUTPUT -j FILTER_DNS
}

create_dns_iptables() {
  echo "[Info]: creating dns proxy"
    ${iptables_wait} -t nat -N DNS
    ${iptables_wait} -t nat -A DNS -p tcp --dport 53 -j REDIRECT --to-port ${dns_port}
    ${iptables_wait} -t nat -A DNS -p udp --dport 53 -j REDIRECT --to-port ${dns_port}
    ${iptables_wait} -t nat -A OUTPUT -p udp -m owner --uid-owner ${dnsmasq_uid} --dport 53 -j DNAT --to-destination 127.0.0.1:${dns_port}
}

flush_iptables() {
  echo "[Info]: flush iptables"
    # Delete iptables rules
    ${iptables_wait} -t nat -D PREROUTING -j AP_PROXY
    ${iptables_wait} -t nat -D PREROUTING -j DNS
    # Clear iptables chain
    ${iptables_wait} -t mangle -F OUTPUT
    ${iptables_wait} -t nat -F OUTPUT
    ${iptables_wait} -t mangle -F TROJAN
    ${iptables_wait} -t mangle -F PROXY
    ${iptables_wait} -t nat -F FILTER_DNS
    ${iptables_wait} -t nat -F DNS
    ${iptables_wait} -t nat -F AP_PROXY
    # Delete iptables chain
    ${iptables_wait} -t mangle -X TROJAN
    ${iptables_wait} -t mangle -X PROXY
    ${iptables_wait} -t nat -X FILTER_DNS
    ${iptables_wait} -t nat -X DNS
    ${iptables_wait} -t nat -X AP_PROXY
    ${iptables_wait} -t nat -D OUTPUT -p udp -m owner --uid-owner ${dnsmasq_uid} --dport 53 -j DNAT --to-destination 127.0.0.1:${dns_port} 2>/dev/null
}

probe_proxy_mode() {
    echo "" >> ${appid_file}
    sed -i '/^$/d' "${appid_file}"
    if [ -f "${appid_file}" ] ; then
        first_line=$(head -1 ${appid_file})
        if [ "${first_line}" = "ALL" ] ; then
            proxy_mode=ALL
        elif [ "${first_line}" = "bypass" ] ; then
            proxy_mode=skip
        else
            proxy_mode=pick
        fi
    fi

    while read appid_line ; do
        appid_text=(`echo ${appid_line}`)
        for appid_word in ${appid_text[*]} ; do
            if [ "${appid_word}" = "bypass" ] ; then
                break
            else
                appid_list=(${appid_list[*]} ${appid_word})
            fi
        done
    done < ${appid_file}
    # echo ${appid_list[*]}
}

disable_proxy() {
  flush_iptables 2> /dev/null
}

enable_proxy() {
  create_mangle_iptables
}

# find_ip_path
suit_iptables_version

case "$1" in
  enable)
    disable_proxy
    enable_proxy
    ;;
  disable)
    disable_proxy
    ;;
  renew)
    disable_proxy
    sleep 1
    enable_proxy
    ;;
  *)
    echo "$0:  usage:  $0 {enable|disable|renew}"
    ;;
esac
